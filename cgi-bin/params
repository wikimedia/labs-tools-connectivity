
#
# Converts a string given to a representation suitable for use in url
#
url ()
{
  local str=$1

  str=${str//\?/\%3F}
  str=${str//\&quot;/\%22}
  str=${str//\&/\%26}
  str=${str//\"/\%22}
  str=${str//\+/\%2B}

  echo "$str"
}

# Mashiah Davidson: # Thanks a lot to Chris F.A. Johnson for my time saved.
# This function copied as is from 
# http://www.unixreview.com/documents/s=10116/ur0701i/parse-query.sh.txt
parse_query() #@ USAGE: parse_query var ...                                                                 
{
  local var val
  local IFS='&'
  vars="&$*&"
  [ "$REQUEST_METHOD" = "POST" ] && read QUERY_STRING
  set -f
  for item in $QUERY_STRING
  do
    var=${item%%=*}
    val=${item#*=}
    val=${val//+/ }
    case $vars in
      *"&$var&"* )
        case $val in
          *%[0-9a-fA-F][0-9a-fA-F]*)
            val=$( printf "%b" "${val//\%/\\x}." )
            val=${val%.}
        esac
        eval "$var=\$val"
        eval "${var}_url=\$( url \"\$val\" )"
        ;;
    esac
  done
  set +f
}

parse_query language interface listby shift view

if [ "$language" = '' ]
then
  listby='language'
fi
language_sql=${language//\-/_}

#
# Any working server should be queried here
#
anysrv=2
www=1
source ./ts ${anysrv}
anydbserver=$anysrv

if [ "$language" != '' ]
then
  #
  # Sorry, would you please share which server runs wikipedia for $language?
  #
  dbserver=$( echo "SELECT server_num( '$language' );" | $( sql ${dbserver} u_${usr}_golem_p ) 2>&1 )

  source ./ts $dbserver
fi

translation_required=0

if [ ! -f ./$listby.$interface ]
then
  translation_required=1
  interface='en'
fi
interface_url=$( url "$interface" )

if [ "$language" != '' ]
then
  stdurl="language=${language_url}&amp;interface=${interface_url}"
else
  stdurl="interface=${interface_url}"
fi

if [ "$view" != '' ]
then
  stdurl="${stdurl}&amp;view=${view}"
fi

shiftnext=$((shift+100))
shiftprev=$((shift-100))
if [ $((shiftprev)) -le 0 ]
then
  shiftprev=''
fi

optional_parameters=${listby//creator/user,registered}
optional_parameters=${optional_parameters//categoryspruce/networkpath}
optional_parameters=${optional_parameters//\,/ }

if [ "${optional_parameters}" != '' ]
then
  #
  # dangerous!!! 
  # filtering should be applied in order to exclude undesired names
  #
  parse_query ${optional_parameters}
fi

if [ "$category" != '' ]
then
  wiki_link_to_category="<a href=\"http://$language.wikipedia.org/w/index.php?title=Category:${category_url}\">$category</a>"
  #
  # this allows the row passing through all the quatermarks and finaly be
  # delivered in sql as \"
  #
  categorysql=${category//\"/\"\'\\\\\"\'\"}
  convertedcat=${categorysql// /_}
fi

get_lname()
{
  local l=$1

  local n=$(
             {
               echo "SELECT CONCAT( REPLACE(english_name,' ','_'), ' / ', REPLACE(native_name,' ','_') ) FROM toolserver.language WHERE LOWER(lang)='$l';"
             } | $( sql ${dbserver} u_${usr}_golem_s${dbserver}_${language_sql} ) 2>&1 | {
                              while read -r line
                                do echo $line
                              done
             }
           )
  n=${n//_/ }
  if [ "$n" = '' ]
  then
    n="$l.wikipedia.org"
  fi

  echo $n
}

nativename=$( get_lname $language )

if [ "$foreign" != '' ]
then
  foreignname=$( get_lname $foreign )
fi

if [ "$title" != '' ]
then
  titlesql=${title//\"/\"\'\\\\\"\'\"}
  convertedtitle=${titlesql// /_}
  title=${title//_/ }

  # for orphaned and other isolated articles we use different definitions.
  isotype=$(
             {
               echo "SELECT cat FROM ruwiki0 WHERE title like \"$convertedtitle\";"
             } | $( sql ${dbserver} u_${usr}_golem_s${dbserver}_${language_sql} ) 2>&1 | { 
                                 while read -r line
                                   do echo $line
                                 done
             }
           )
fi

if [ "$template" != '' ]
then
  templatesql=${template//\"/\"\'\\\\\"\'\"}
  template=${template//_/ }
fi
